      <!-- ============================================================================= -->

        <section data-markdown="">
          <textarea data-template>
### useQuery: GraphQL Query ausf√ºhren

 * ```javascript
  const PostListQuery = gql`...`;

  function BlogListPage() {
    const { loading, error, data } = useQuery(PostListQuery);

    if (loading) {
      return <h1>Loading, please wait...</h1>;
    }

    if (error) {
      return <h1>GraphQL Failed: {error.toString()}</h1>;
    }

    return &lt;PostList posts={data.posts} />;
  }
  ```

---

### useQuery: Lebenszyklus

* `useQuery` f√ºhrt automatisch den √ºbergebenen Query aus, sobald die
              Komponente gemounted wird
* Sobald der Request l√§uft, gibt die Funktion ein Objekt zur√ºck, in dem
             `loading` auf `true` gesetzt ist. Die Komponente rendert sich neu
              und Du kannst z.B. einen Loading Indikator anzeigen
* Sobald die Antwort des Requests ankommt, wird deine Komponente erneut gerendert:
  * Der `useQuery`-Hook gibt nun ein Objekt zur√ºck, in dem entweder `error` oder
              `data` gesetzt ist und `loading` jetzt `false` ist.
  * Du kannst die Informationen nutzen, um die Darstellung zu aktualisieren (Daten oder Fehler anzeigen)
  * Wenn der Request erfolgreich war, aktualisiert Apollo den globalen Cache mit den
              geladenen Daten
  * <em>Alle</em> sichtbaren Komponenten, die (Teile der) geladenen Daten darstellen,
              werden automatisch aktualisiert
  * <!-- .element: class="todo" --> beispiel!!!!!!!

---

### useQuery: Variablen

* GraphQL Queries k√∂nnen Variablen enthalten
* Das (optionale) zweite Argument von `useQuery` ist ein Objekt mit
            Konfigurationsoptionen
* Mit diesem Argument kannst Du auch Variabeln an deinen Query √ºbergeben
* ```javascript
  const POST_PAGE_QUERY = gql`
    query PostPageQuery($postId: ID!) {
      post(postId: $postId) {
        id  title date
        body user { name }
      }
    }
  `;
  ```
* ```javascript
  function PostPage() {
    // Receive postId from URL params
    const { postId } = useParams();

    const { loading, error, data } = useQuery(POST_PAGE_QUERY,
      {
        variables: { postId }
      }
    );
    // ...
  ```
---

## TypeScript

<!-- .element: class="todo" -->Query

---

## √úbung

<!-- .element: class="todo" -->Query




          </textarea>
         </section>
<section data-markdown="">
  <textarea data-template>
    ## GraphQL CodeGenerator

<!-- .element: class="todo" -->Erst zum Schluss oder schon ab hier?
  </textarea>
 </section>




        <!-- ============================================================================= -->

        <section>
          <h2>√úbung: Ein GraphQL Query ausf√ºhren</h2>
          <p>
            <em>Vorbereitung: GraphQL-Backend starten </em>
          </p>
          <div class="fragment">
            <p>
              Bitte das GraphQL-Backend starten:
            </p>
            <pre><code>
                  cd react-training/blog-example/backend-graphql

                  npm install (falls noch nicht erfolgt)

                  npm start
                </code></pre>
            <p>Der Server l√§uft auf Port 4000</p>
            <p>
              Du kannst den
              <a
                  href="https://www.apollographql.com/docs/apollo-server/v2/testing/graphql-playground/"
              >Apollo Playground</a
              >
              f√ºr das Blog-Backend unter
              <a href="http://localhost:4000">http://localhost:4000</a> √∂ffnen und ausprobieren
            </p>
            <p>
              Wenn sich der Playground √∂ffnen l√§sst, funktioniert das Backend. Dann bitte Hand heben
              üôã, damit wir gemeinsam weitermachen k√∂nnen
            </p>
          </div>
        </section>

        <section>
          <h2>√úbung: Ein GraphQL Query ausf√ºhren</h2>
          <ol class="x-list">
            <li class="fragment">
              <em
              >Achtung: Neuer Workspace! Wir arbeiten f√ºr diese √úbung im Verzeichnis
                <b>workspace-graphql</b></em
              >
            </li>

            <li class="fragment">Bitte beende den "alten" Workspace</li>
            <li class="fragment">
              Starte dann in <b>workspace-graphql</b> den Development Server f√ºr React:
              <pre><code>
            cd react-training/blog-example/workspace-graphql

            npm install (falls noch nicht erfolgt)

            npm start
          </code></pre>
            </li>
            <li class="fragment">
              <em
              >Implementiere die <code><b>PostListPage</b></code> Komponente</em
              >
              (TODOs stehen in der Datei)
            </li>
            <li class="fragment">
              Wenn die Komponente funktioniert, sollten die Blog-Posts angezeigt werden (in dieser
              Version der Anwendung nur der Titel)
            </li>
            <li class="fragment">Fertige L√∂sung in steps/9-graphql</li>

            <li class="fragment">Wenn Du fertig bist, bitte Hand heben üôã</li>
            <!-- <li class="fragment">
              Zusatz: √ñffne dann den Netzwerk-Tab im Browser und pr√ºfe, wann Netzwerk-Requests
              durchgef√ºhrt werden, wenn Du dir nacheinander mehrere Blog-Artikel anzeigen l√§sst
            </li> -->
          </ol>
        </section>

        <!-- ============================================================================= -->
        <section>
          <h3>useQuery: Cache #1</h3>

          <p>
            Wenn deine Komponete erneut gerendert wird, wird dein Query
            <b>nicht erneut ausgef√ºhrt</b>, sofern Apollo das Ergebnis noch im Cache findet
          </p>
          <p>üëâ Netzwerk</p>
        </section>

        <!-- ============================================================================= -->
        <section>
          <h3>Der Apollo Cache</h3>
          <p><em>Apollo normalisiert die Daten bevor sie in den Cache gelegt werden:</em></p>
          <p class="fragment">
            F√ºr jedes Objekt, das als Teil deines Queries geladen wurde (egal auf welchem Level),
            Apollo ermittelt den
            <b>typename</b>
          </p>
          <p class="fragment">
            Das <code>__typename</code>-Feld wird daf√ºr automatisch allen Queries von Euch
            hinzugef√ºgt!
          </p>
          <p class="fragment">F√ºr jedes Objekt extrahiert Apollo dessen <b>id</b></p>
          <p class="fragment">
            Wenn das <b>id</b>-Feld eines Objektes nicht <b>id</b> hei√üt, muss das in der
            Konfiguration von Apollo gesetzt werden
          </p>
          <p class="fragment">
            <b>Empfehlung:</b> <em>Immer</em> das <b>id</b>-Feld in jedem Objekt in jedem Query
            abfragen!
          </p>
        </section>

        <section>
          <h3>Apollo GraphQL: Mutations</h3>
          <p class="fragment">
            Ausf√ºhren von Mutations ist √§hnlich wie das Ausf√ºhren eines Queries
          </p>
          <p class="fragment">
            Hook:
            <a href="https://www.apollographql.com/docs/react/data/mutations/#executing-a-mutation"
            ><b>useMutation</b></a
            >
          </p>
          <p class="fragment">
            Der useMutation Hook gibt ein Array (Tuple) mit zwei Eintr√§gen zur√ºck:
          </p>
          <p class="fragment">
            1. Eine Funktion zum Ausf√ºhren der Mutation (z.B. nach einer Benutzerinteraktion)
          </p>
          <p class="fragment">
            2. Das Ergebnis-Objekt, das wird schon bei <code>useQuery</code> gesehen haben
            (zus√§tzlich: ein <code>called</code>-Property)
          </p>

          <pre class="fragment"><code class="javascript">
const NewBlogPostMutation = gql`...`;

function PostEditorPage() {
  const [mutate, { error, data, called }] = useMutation(NewBlogPostMutation);

  async function savePost(post) {
    mutate({
        variables: {
        postData: post
      }
    });
  }

  const errorMessage = error ? ... : null;

  if (called && !errorMessage) {
  // Mutation has been executed and was successful
  return &lt;SuccessConfirmation />;
}

  // Mutation hasn't been run or failed with an error
  return &lt;PostEditor onSavePost={savePost} error={errorMessage} />;
}
  </code></pre>
        </section>
        <section>
          <h3>√úbung: Eine Mutation</h3>
          <p>
            <em>Vervollst√§ndige die <code>PostEditorPage</code> Komponente</em>
          </p>

          <ol class="x-list">
            <li>In <code>PostEditorPage.js</code> stehen TODOs</li>
            <li>Wenn Du fertig bist, bitte Hand heben üôã</li>
          </ol>
        </section>

        <section>
          <h3>Aktualisieren des Caches</h3>
          <p>Es gibt mehrere M√∂glichkeiten:</p>
          <ul>
            <li class="fragment">
              <a
                  href="https://www.apollographql.com/docs/react/data/queries/#setting-a-fetch-policy"
              >Fetch Policy</a
              >
            </li>
            <li class="fragment">
              <a href="https://www.apollographql.com/docs/react/data/queries/#refetching"
              >Refetch function</a
              >
            </li>
            <li class="fragment">
              <a href="https://www.apollographql.com/docs/react/data/queries/#polling"
              >Polling (alle x ms)</a
              >
            </li>
            <li class="fragment">
              Mit einer "<b>subscribe to more</b>"-<a
                href="https://www.apollographql.com/docs/react/data/subscriptions/#subscribing-to-updates-for-a-query"
            >Subscription</a
            >
            </li>
            <li class="fragment">
              Mit der
              <a
                  href="https://www.apollographql.com/docs/react/data/mutations/#updating-the-cache-directly"
              >Cache API</a
              >
              kannst Du den Cache direkt manipulieren
            </li>
          </ul>
        </section>

        <!-- ============================================================================= -->
        <section>
          <h3>Fetch Policy #1</h3>
          <p>
            Mit einer Fetch Policy kannst Du bei <code>useQuery</code> einstellen, wann dein Query
            erneut ausgef√ºhrt werden soll
          </p>
          <pre class="fragment"><code class="javascript">
function PostPage() {
  // Receive postId from URL params
  const { postId } = useParams();

  const { loading, error, data } = useQuery(POST_PAGE_QUERY,
    {
      variables: { postId },
      fetchPolicy: "network-only"
    }
  );
  // ...
}
</code></pre>
        </section>
        <section>
          <h3>Fetch Policy #2</h3>
          <p>Erlaubte Werte</p>
          <ul>
            <li class="fragment">
              <b>cache-first</b>: Wenn die angeforderten Daten bereits im Cache sind, werden sie aus
              dem Cache zur√ºckgegeben, sonst vom Backend geladen (Default)
            </li>
            <li class="fragment">
              <b>cache-and-network</b>: Falls vorhanden, Daten aus dem Cache zur√ºckgeben, aber in
              jedem Fall auch einen Backend-Request auszuf√ºhren, um ggf. aktualisierte Daten zu
              laden (Schnelle Darstellung, die ggf. kurze Zeit sp√§ter aktualisiert wird)
            </li>
            <li class="fragment">
              <b>network-only</b>: Immer Daten vom Backend laden (keine Daten vom Cache verwenden),
              aber mit dem Ergebnis den Cache aktualisieren
            </li>
            <li class="fragment">
              <b>no-cache</b>: Immer Daten vom Backend laden und auch nicht den Cache aktualisieren
            </li>
            <li class="fragment">
              <b>cache-only</b>: Nur Daten vom Cache verwenden. Wenn die Daten darin nicht gefunden
              werden, wird kein Ergebnis zur√ºckgeliefert
            </li>
          </ul>
        </section>

        <!-- ============================================================================= -->
        <section>
          <h3>Refetch Funktion</h3>
          <p>
            <code>useQuery</code> liefert eine <b>refetch</b>-Funktion, die Du verwenden kannst, um
            den Query erneut auszuf√ºhren (z.B. nach Klick auf einen "Aktualisieren"-Button)
          </p>

          <pre class="fragment"><code class="javascript">
function BlogListPage() {
  const { loading, error, data, refetch } = useQuery(PostListQuery);

  if (loading) {
    return <h1>Loading, please wait...</h1>;
  }

  if (error) {
    return <h1>GraphQL Failed: {error.toString()}</h1>;
  }

  return &lt;PostList posts={data.posts} onRefetch={refetch}/>;
}
    </code></pre>

          <pre class="fragment"><code class="javascript">
function PostList({posts, onRefetch}) {
  return &lt;>
    &lt;button onClick={onRefetch}>Refresh Posts&lt;/button>
    ...
  &lt;/>
}
</code></pre>
        </section>

        <section>
          <h3>Polling</h3>
          <p>
            Du kannst ein <code>pollInterval</code> (Zeit in ms) als Query Option angeben. Apollo
            f√ºhrt dann den Query dann in dem angegebenen Interval automatisch neu aus
          </p>
          <pre class="fragment"><code class="javascript">
function BlogListPage() {
  const { loading, error, data } = useQuery(POST_LIST_QUERY,
    { pollInterval: 1500 }
  );

// ...wie gesehen...
}
    </code></pre>
        </section>

        <!-- ============================================================================= -->
        <section>
          <h3>Den Cache nach einer Mutation aktualisieren</h3>

          <ul>
            <li>
              <a href="https://www.apollographql.com/docs/react/data/mutations/#refetching-queries"
              >refetch Queries</a
              >: Damit kannst Du eine Liste von Queries angeben, die erneut ausgef√ºhrt werden, wenn
              eine Mutation erfolgreich war
            </li>
            <li>
              Mit der
              <a
                  href="https://www.apollographql.com/docs/react/data/mutations/#updating-the-cache-directly"
              >update-function</a
              >: kannst Du den Cache direkt per API manipulieren, sobald deine Mutation erfolgreich
              war
            </li>
          </ul>
        </section>

        <section>
          <h3>Nach einer Mutation... wird der Cache automatisch aktualisiert (eventuell)</h3>
          <p class="fragment">
            Wenn deine Mutation ein Objekt zur√ºckliefert, das sich bereits im Cache befindet, wird
            es dort aktualisiert
          </p>
          <p class="fragment">
            Beispiel: Du <b>aktualisierts</b> einen existierenden Blog Post und das Ergebnis der
            Mutation enth√§lt den aktualisierten Post
          </p>

          <pre class="fragment"><code class="javascript">
const UpdatePost = gql`
  mutation {
    updateBlogPost(postId: "P1", newTitle: "...", newBody: "...") {
        id
        title
        body
    }
  }
`
      </code></pre>
          <p class="fragment">
            In diesem Beispiel kann Apollo das Objekt <b>P1</b> im Cache automatisch aktualisieren
          </p>
        </section>

        <section>
          <h3>Grenzen der automatischen Cache-Aktualisierung</h3>
          <p>Es gibt F√§lle, da kann Apollo den Cache nicht selbstst√§ndig aktualisieren</p>
          <p>Beispiel: Einf√ºgen eines neuen Objektes in eine Liste</p>
          <p>
            Apollo wei√ü nicht, dass das Objekt, dass eine Mutation zur√ºckliefert, (auch) in eine
            bestehende Liste geh√∂rt
          </p>
          <p>
            Beispiel: Du liest Blog Posts. Du f√ºhrst eine Mutation aus, die einen neuen Blog Post
            anlegt (und diesen auch zur√ºckliefert) <br />
            Apollo legt das neue Objekt in den Cache, wei√ü aber nicht, dass es auch in die Liste der
            gelesenen Posts geh√∂rt
          </p>
        </section>

        <section>
          <h3>Die Apollo Cache API</h3>
          <p>Du kannst den Query auslesen (mit einem GraphQL Query!)</p>
          <p>Du kannst den Cache direkt modifizieren</p>
        </section>

        <section>
          <h3>Beispiel: Den Cache aktualisieren</h3>
          <p>Du kannst die <b>update-Function</b> bei <code>useMutation</code> angeben:</p>
          <p>
            Diese Funktion wird nach dem Ausf√ºhren der Mutation von Apollo aufgerufen
          </p>
          <p>
            Die Funktion bekommt das Mutation-Ergebnis sowie den aktuellen Cache von Apollo
            √ºbergeben
          </p>
          <p>You can use the cache api to add the new object</p>

          <pre class="fragment"><code class="javascript">
const ReadPostsFromCache = gql`
  query ReadPosts {
    posts {
      id
    }
  }
`;

function PostEditorPage() {
  function savePost(post: NewBlogPost) {
    mutate({
      variables: {...},
      update: (cache, {data}) => {
      const { posts } = cache.readQuery({
        query: ReadPostsFromCache
      });
      cache.writeQuery({
        query: ReadPostsFromCache,
        data: { posts: posts.concat(data.newPost) }
      });
    }
  })
}

return ...;
}
</code></pre>
        </section>