package nh.publy;

import graphql.ExecutionResult;
import graphql.GraphQL;
import graphql.schema.DataFetcher;
import graphql.schema.DataFetchingEnvironment;
import graphql.schema.GraphQLSchema;
import graphql.schema.idl.RuntimeWiring;
import graphql.schema.idl.SchemaGenerator;
import graphql.schema.idl.SchemaParser;
import graphql.schema.idl.TypeDefinitionRegistry;
import nh.publy.domain.Story;
import nh.publy.domain.StoryRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;

public class GraphQLApi {

  private static final Logger log = LoggerFactory.getLogger( GraphQLApi.class );

  StoryRepository storyRepository = new StoryRepository();

  private String schema = """
      type Member {
        id: ID!
        name: ID!
      }

      type Story {
        id: ID!
        title: String!
        body: String!

        writtenBy: Member!
      }

      type Query {
        stories: [Story!]!
      }

    """;

  class StoriesQueryDataFetcher implements DataFetcher<List<Story>> {
    @Override
    public List<Story> get(DataFetchingEnvironment environment) throws Exception {
      return storyRepository.findAllStories();
    }
  }

  public void buildGraphQLApi() {

    SchemaParser parser = new SchemaParser();
    TypeDefinitionRegistry typeDefinitionRegistry = parser.parse(schema);

    RuntimeWiring wiring = RuntimeWiring.newRuntimeWiring()
      .type("Query", builder -> {
        return builder.dataFetcher("stories", new StoriesQueryDataFetcher());
      })
      .build();

    SchemaGenerator schemaGenerator = new SchemaGenerator();
    GraphQLSchema graphQLSchema = schemaGenerator.makeExecutableSchema(typeDefinitionRegistry, wiring);

    GraphQL graphQL = GraphQL.newGraphQL(graphQLSchema).build();

    ExecutionResult execute = graphQL.execute("{ stories { id writtenBy { name } } }");
    Object data = execute.getData();
    log.info("RESULT: {}", (Object) data);


  }

  public static void main(String []args) throws Exception {
    GraphQLApi graphQLApi = new GraphQLApi();
    graphQLApi.buildGraphQLApi();
  }

}
